import os
import random as rnd
import string

import numpy
from music21 import instrument, note, chord, stream


def generate_notes(model, input, pitch_names, latent_dim, generated_notes_number):
    """ Generate notes from the neural network based on a sequence of notes """
    # Pick a random sequence from the input as a starting point for the prediction
    start = numpy.random.randint(0, len(input) - 1)

    int_to_note = dict((number, note) for number, note in enumerate(pitch_names))

    pattern = input[start]
    prediction_output = []

    for note_index in range(generated_notes_number):
        prediction_input = numpy.reshape(pattern, (1, len(pattern), 1))
        prediction_input = prediction_input / float(latent_dim)

        prediction = model.predict(prediction_input, verbose=0)

        index = numpy.argmax(prediction)
        result = int_to_note[index]
        prediction_output.append(result)

        pattern.append(index)
        pattern = pattern[1:len(pattern)]

    return prediction_output


def generate_midi_name(dir, min_chars: int = 6, max_chars: int = 10):
    return os.path.join(f'./{dir}',
                        ''.join(rnd.choices(string.ascii_lowercase, k=rnd.randint(min_chars, max_chars))) + '.mid')


def convert_to_midi(dir, prediction_output):
    """ Convert the output from the prediction to notes and create a midi file
        from the notes """
    offset = 0
    output_notes = []

    # Create note and chord objects based on the values generated by the model
    for pattern in prediction_output:
        # Pattern is a chord
        if ('.' in pattern) or pattern.isdigit():
            notes_in_chord = pattern.split('.')
            notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(int(current_note))
                new_note.storedInstrument = instrument.Piano()
                notes.append(new_note)
            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
        # Pattern is a note
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            new_note.storedInstrument = instrument.Piano()
            output_notes.append(new_note)

        # Increase offset each iteration so that notes do not stack
        offset += 0.5

    midi_stream = stream.Stream(output_notes)

    midi_stream.write('midi', fp=generate_midi_name(dir, 6, 10))
